from os import getenv
import datetime
from typing import TypedDict

from dotenv import load_dotenv
from langchain_openai import ChatOpenAI, OpenAIEmbeddings
from langchain_core.messages import SystemMessage, HumanMessage, ToolMessage, AIMessage
from langchain_core.tools import tool
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.vectorstores import InMemoryVectorStore, VectorStoreRetriever
from langchain_core.documents import Document

from langgraph.checkpoint.memory import InMemorySaver
from langgraph.graph import StateGraph, END

from CalendarClient import CalendarClient

load_dotenv()
TOKEN = getenv("OPENAI_API_KEY")

calendar = CalendarClient(
    service_account_file="service-creds.json",
    scopes=["https://www.googleapis.com/auth/calendar"],
    calendar_id=""
)

@tool
def list_free_slots(start_iso: str, end_iso: str, duration_minutes: int) -> str:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤ —É –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ –º—ñ–∂ –¥–≤–æ–º–∞ ISO-–¥–∞—Ç–∞–º–∏ –∑ –≤–∫–∞–∑–∞–Ω–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é.

    Parameters:
    ----------
    start_iso : str
        –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "2025-06-16T09:00:00+03:00").
    
    end_iso : str
        –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601, —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤.
    
    duration_minutes : int
        –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –±–∞–∂–∞–Ω–æ–≥–æ —Å–ª–æ—Ç—É —É —Ö–≤–∏–ª–∏–Ω–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 30, 60).

    Returns:
    -------
    str
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —á–∞—Å–æ–≤–∏—Ö —Å–ª–æ—Ç—ñ–≤ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –≤—ñ–ª—å–Ω–æ–≥–æ —á–∞—Å—É –Ω–µ–º–∞—î.
    """
    return calendar.list_free_slots(
        start_iso=start_iso,
        end_iso=end_iso,
        duration_minutes=duration_minutes
    )

@tool
def create_appointment(specialist: str, start_iso: str, end_iso: str, summary: str, description: str, attendee_email: str = None,) -> str:
    """
    –°—Ç–≤–æ—Ä—é—î –ø–æ–¥—ñ—é –≤ Google Calendar –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –¥–∞—Ç—É –∑ –æ–ø–∏—Å–æ–º —ñ –¥–µ—Ç–∞–ª—è–º–∏.

    Parameters:
    ----------
    specialist : str
        –Ü–º'—è –∞–±–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞, —è–∫–∏–π –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "laserepilation").
        –¶–µ –ø–æ–ª–µ –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–ª—è –ª–æ–≥—ñ–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –∞–±–æ –∑–∞–ø–∏—Å—É –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

    start_iso : str
        –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601 
        (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "2025-06-16T10:00:00+03:00").

    end_iso : str
        –ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞/—á–∞—Å –ø–æ–¥—ñ—ó —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601.

    summary : str
        –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó –∞–±–æ —ó—ó –Ω–∞–∑–≤–∞ 
        (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–õ–∞–∑–µ—Ä–Ω–∞ –µ–ø—ñ–ª—è—Ü—ñ—è –¥–ª—è –û–ª–µ–Ω–∏").

    description : str
        –î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó, –≤–∫–ª—é—á–∞—é—á–∏ —Ç–∏–ø –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –ø–æ–±–∞–∂–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞, 
        –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–æ—â–æ.

    attendee_email : str, optional
        Email –∫–ª—ñ—î–Ω—Ç–∞, —è–∫–æ–º—É –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é. 
        –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, –ø–æ–¥—ñ—è —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–µ–∑ —É—á–∞—Å–Ω–∏–∫–∞.

    Returns:
    -------
    str
        –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–¥—ñ—ó –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
    """
    return calendar.create_appointment(
        specialist=specialist,
        start_iso=start_iso,
        end_iso=end_iso,
        summary=summary,
        description=description,
        attendee_email=attendee_email
    )

@tool
def current_date_info():
    """–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —Ç–∞ –Ω–∞–∑–≤—É –¥–Ω—è —Ç–∏–∂–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏, —è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –∞–±–æ –¥–∞—Ç–∞."""
    current_date = datetime.date.today()
    day_name = current_date.strftime("%A")
    return {day_name: str(current_date)}

faq_text = open("faq.txt", "r", encoding="utf-8").read()
docs = [Document(page_content=chunk) for chunk in faq_text.split("\n\n") if chunk.strip()]

splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
chunks = splitter.split_documents(docs)

embedding_model = OpenAIEmbeddings(model="text-embedding-3-small")
vectorstore = InMemoryVectorStore.from_documents(chunks, embedding_model)

retriever = VectorStoreRetriever(vectorstore=vectorstore)

api_tools = [current_date_info, list_free_slots, create_appointment]
tool_mapping = {tool.name: tool for tool in api_tools}

# llm = ChatOpenAI(model="gpt-4o-mini").bind_tools(api_tools)
llm = ChatOpenAI(model="o3-mini").bind_tools(api_tools)

checkpointer = InMemorySaver()

class State(TypedDict, total=False):
    user_input: str
    output: str
    messages: list

def beauty_agent(state: State) -> State:
    print("üü¢ STATE IN:", state)

    if "messages" not in state:
        state["messages"] = [
            SystemMessage(content="""–¢–∏ - –º–µ–Ω–µ–¥–∂–µ—Ä –º–∞–π—Å—Ç—Ä–∞ –ª–∞–∑–µ—Ä–Ω–æ—ó –µ–ø—ñ–ª—è—Ü—ñ—ó. –°–ø—ñ–ª–∫—É—î—à—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, —á—ñ—Ç–∫–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —Ç–∞ –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–æ (–¥–æ–¥–∞–≤–∞–π —Å–º–∞–π–ª–∏–∫–∏). 
            –¢–≤–æ—è —Ä–æ–ª—å: 
            1. –í–µ—Å—Ç–∏ –¥—ñ–∞–ª–æ–≥ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –≤ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –≤—ñ–¥ —ñ–º–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∞;
            2. –ü—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è;
            3. –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø–æ–≥–æ–¥–∂—É—î—Ç—å—Å—è ‚Äî –±—Ä–æ–Ω—é—î—à —Å–ª–æ—Ç —É Google Calendar. –Ø–∫—â–æ —á–∞—Å –∑–∞–π–Ω—è—Ç–∏–π - –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —ñ–Ω—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏. –ü–µ—Ä–µ–¥ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º "current_date_info".
            –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ª–æ—Ç—É, –Ω–∞–¥—Å–∏–ª–∞–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:¬´–ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ –ß–µ–∫–∞—î–º–æ –≤–∞—Å DD.MM –æ HH\:MM¬ª
            –†–æ–±–æ—á–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ 9:00 –¥–æ 18:00.
            –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∑—ñ, –ø–∏—à–∏ —Ç–µ–ø–ª–æ –π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ.
            """)
        ]

    query = state["user_input"]
    retrieved_docs = retriever.get_relevant_documents(state["user_input"])
    if retrieved_docs:
        rag_context = "\n\n".join([doc.page_content for doc in retrieved_docs])
        state["messages"].append(
            AIMessage(content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∑ FAQ:\n{rag_context}")
        )

    state["messages"].append(HumanMessage(content=state["user_input"]))

    # –ü—Ä–∏–º—É—Å–æ–≤–∏–π –≤–∏–∫–ª–∏–∫ current_date_info()
    # date_info = current_date_info.invoke(state["messages"])
    # state["messages"].append(ToolMessage(content={"result": date_info}, tool_call_id="manual-date-check"))
    while True:
        llm_output = llm.invoke(state["messages"])
        state["messages"].append(llm_output)

        if llm_output.tool_calls:
            for call in llm_output.tool_calls:
                tool_fn = tool_mapping.get(call["name"])
                if tool_fn:
                    tool_output = tool_fn.invoke(call["args"])
                    state["messages"].append(
                        ToolMessage(content={"result": tool_output}, tool_call_id=call["id"])
                    )
        else:
            state["output"] = llm_output.content
            break

    return state

builder = StateGraph(state_schema=State)
builder.add_node("BeautyAgent", beauty_agent)
builder.set_entry_point("BeautyAgent")
builder.add_edge("BeautyAgent", END)

graph = builder.compile(checkpointer=checkpointer)

if __name__ == "__main__":
    result = graph.invoke({"user_input": "–ß–∏ —î —É –≤–∞—Å –≤—ñ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏ –Ω–∞ 14 –ª–∏–ø–Ω—è? –í –º–µ–Ω–µ —î –≥–æ–¥–∏–Ω–∞ —á–∞—Å—É."}, {"configurable": {"thread_id": "1"}})
    result = graph.invoke({"user_input": "–Ø –± —Ö–æ—Ç—ñ–≤ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ 14 –ª–∏–ø–Ω—è –Ω–∞ 13:00"}, {"configurable": {"thread_id": "1"}})
    print("üü¢ RESULT:", result["output"])
